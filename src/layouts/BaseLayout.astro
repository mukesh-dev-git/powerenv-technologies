---
// Import the regular components
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// 1. Import the Vercel Analytics component for Astro
import Analytics from '@vercel/analytics/astro';

export interface Props {
	title: string;
}

const { title } = Astro.props;
---
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Powerenv Technologies provides ultra-reliable smart metering to eliminate revenue loss and modernize India's grid." />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title} | Powerenv Technologies</title>

		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&family=Lato:wght@400;700&display=swap" rel="stylesheet">

		<!-- Global Stylesheet -->
		<link rel="stylesheet" href="/styles/global.css">
		
		<!-- Animation Enhancements -->
		<link rel="stylesheet" href="/styles/animations.css">
		
		<!-- Smart Grid Loader Animation -->
		<link rel="stylesheet" href="/styles/smart-grid-loader.css">
		
		<!-- Inline CSS Variables for Vercel compatibility -->
		<style>
			:root {
				--primary-blue: #0A2342;
				--secondary-green: #2CA58D;
				--neutral-light-gray: #F4F6F8;
				--neutral-dark-gray: #333333;
				--text-light: #FFFFFF;
				--font-heading: 'Montserrat', sans-serif;
				--font-body: 'Lato', sans-serif;
			}
		</style>
		
		<!-- Locomotive Scroll CSS -->
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/locomotive-scroll@4.1.4/dist/locomotive-scroll.css">
	</head>
	<body>
		<!-- Smart Grid Loading Overlay -->
		<div class="power-loader" id="powerLoader">
			<div class="smart-grid-container">
				<!-- Communication Tower -->
				<div class="comm-tower">
					<div class="connection-status"></div>
				</div>
				<div class="comm-tower-base"></div>
				
				<!-- Tower Signal Rings -->
				<div class="tower-signal-ring"></div>
				<div class="tower-signal-ring"></div>
				<div class="tower-signal-ring"></div>
				
				<!-- Smart Meter -->
				<div class="smart-meter">
					<div class="meter-display">PWR</div>
				</div>
				
				<!-- Wireless Connection Waves -->
				<div class="connection-wave"></div>
				<div class="connection-wave"></div>
				<div class="connection-wave"></div>
				<div class="connection-wave"></div>
				
				<!-- Data Packets -->
				<div class="data-packet data-packet-1"></div>
				<div class="data-packet data-packet-2"></div>
				<div class="data-packet data-packet-3"></div>
				
				<!-- Grid Visualization -->
				<div class="grid-lines"></div>
			</div>
			
			<div class="power-loader-text">Loading Website</div>
			<div class="power-loader-subtext">Establishing Smart Grid Connection...</div>
			
			<div class="loading-progress">
				<div class="loading-progress-fill"></div>
			</div>
			<div class="loading-percentage">0%</div>
		</div>
		
		<div data-scroll-container>
			<Header />
			<main data-scroll-section>
				<slot /> <!-- Page content will be injected here -->
			</main>
			<Footer />
		</div>

		<!-- GSAP and Animation Scripts -->
		<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
		<script type="module">
			// Inline essential animation functions for Vercel compatibility
			const initializeEssentialAnimations = () => {
				if (typeof gsap === 'undefined') {
					console.warn('GSAP not loaded, skipping animations');
					return;
				}
				
				gsap.registerPlugin(ScrollTrigger);
				
				// Hero animations with fallback
				const heroTitle = document.querySelector('.hero h1');
				const heroSubtitle = document.querySelector('.hero .sub-headline');
				const heroButton = document.querySelector('.hero .button-primary');
				
				if (heroTitle) {
					gsap.fromTo(heroTitle, 
						{ opacity: 0, y: 50, scale: 0.9 },
						{ 
							opacity: 1, 
							y: 0, 
							scale: 1,
							duration: 1.2, 
							delay: 0.2, 
							ease: "power3.out"
						}
					);
				}
				
				if (heroSubtitle) {
					gsap.fromTo(heroSubtitle,
						{ opacity: 0, y: 30 },
						{ opacity: 1, y: 0, duration: 1, delay: 0.5, ease: "power3.out" }
					);
				}
				
				if (heroButton) {
					gsap.fromTo(heroButton,
						{ opacity: 0, y: 20 },
						{ opacity: 1, y: 0, duration: 1, delay: 0.8, ease: "power3.out" }
					);
				}
				
				// Basic scroll trigger animations
				gsap.utils.toArray('.animate-on-scroll').forEach((element) => {
					gsap.fromTo(element, 
						{ opacity: 0, y: 50 },
						{
							opacity: 1,
							y: 0,
							duration: 1,
							ease: "power3.out",
							scrollTrigger: {
								trigger: element,
								start: "top 80%",
								end: "bottom 20%",
								toggleActions: "play none none reverse"
							}
						}
					);
				});
			};
			
			// Robust loader initialization that works on both local and Vercel
			const initializeLoader = () => {
				// Smart grid loader animation sequence
				const powerLoader = document.getElementById('powerLoader');
				if (!powerLoader) return;
				
				// Ensure CSS variables are available
				const computedStyle = getComputedStyle(document.documentElement);
				const primaryBlue = computedStyle.getPropertyValue('--primary-blue') || '#0A2342';
				const secondaryGreen = computedStyle.getPropertyValue('--secondary-green') || '#2CA58D';
				
				// Animate loading percentage with better error handling
				const loadingPercentage = powerLoader.querySelector('.loading-percentage');
				if (loadingPercentage) {
					let progress = 0;
					const progressInterval = setInterval(() => {
						progress += Math.random() * 8 + 2; // Random increment between 2-10
						if (progress >= 100) {
							progress = 100;
							clearInterval(progressInterval);
						}
						loadingPercentage.textContent = Math.round(progress) + '%';
					}, 100);
				}
				
				// Stage 1: Connection establishment (at 4 seconds - after tower and meter animations)
				setTimeout(() => {
					powerLoader.classList.add('connected');
					
					// Create power surge effect
					const surge = document.createElement('div');
					surge.className = 'power-surge';
					powerLoader.appendChild(surge);
					
					// Update text
					const loaderText = powerLoader.querySelector('.power-loader-text');
					const loaderSubtext = powerLoader.querySelector('.power-loader-subtext');
					
					if (loaderText) loaderText.textContent = 'Connection Established';
					if (loaderSubtext) loaderSubtext.textContent = 'Loading Website Content...';
					
					// Remove surge effect after animation
					setTimeout(() => {
						if (surge.parentNode) surge.parentNode.removeChild(surge);
					}, 800);
					
				}, 4000);
				
				// Stage 2: Fade out loader (after 6.5 seconds total)
				setTimeout(() => {
					powerLoader.classList.add('fade-out');
					setTimeout(() => {
						powerLoader.style.display = 'none';
						// Ensure page is scrollable after loader
						document.body.style.overflow = 'auto';
					}, 800);
				}, 6500);
			};

			// Initialize animations with better error handling
			const initAnimations = () => {
				try {
					// Delay initialization until loader is almost done
					setTimeout(() => {
						initializeEssentialAnimations();
					}, 6000);
				} catch (error) {
					console.error('Animation initialization failed:', error);
					// Ensure normal scrolling still works
					document.body.style.overflow = 'auto';
					const container = document.querySelector('[data-scroll-container]');
					if (container) {
						container.style.height = 'auto';
						container.style.overflow = 'visible';
					}
				}
			};

			// Multi-stage initialization for better Vercel compatibility
			const initialize = () => {
				initializeLoader();
				initAnimations();
			};

			// Use multiple event listeners for better compatibility
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initialize);
			} else {
				// DOM is already loaded
				initialize();
			}
			
			// Fallback initialization
			window.addEventListener('load', () => {
				if (document.getElementById('powerLoader')?.style.display !== 'none') {
					initialize();
				}
			});
		</script>

		<!-- 2. Add the Analytics component here -->
		<Analytics />
	</body>
</html>
